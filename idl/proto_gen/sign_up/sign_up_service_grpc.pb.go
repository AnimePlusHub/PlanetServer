// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: sign_up_service.proto

package sign_up_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	SignUpService_AddUser_FullMethodName        = "/sign_up_idl.SignUpService/AddUser"
	SignUpService_RequestValid_FullMethodName   = "/sign_up_idl.SignUpService/RequestValid"
	SignUpService_CheckValidCode_FullMethodName = "/sign_up_idl.SignUpService/CheckValidCode"
	SignUpService_Login_FullMethodName          = "/sign_up_idl.SignUpService/Login"
)

// SignUpServiceClient is the client API for SignUpService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SignUpServiceClient interface {
	// 添加用户
	AddUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*MsgRsp, error)
	// 申请验证码（提供用户邮箱），保存redis三分钟
	RequestValid(ctx context.Context, in *EmailReq, opts ...grpc.CallOption) (*MsgRsp, error)
	// 验证邮箱验证码
	CheckValidCode(ctx context.Context, in *CheckEmailReq, opts ...grpc.CallOption) (*MsgRsp, error)
	// 用户登陆验证
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*TokenRsp, error)
}

type signUpServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSignUpServiceClient(cc grpc.ClientConnInterface) SignUpServiceClient {
	return &signUpServiceClient{cc}
}

func (c *signUpServiceClient) AddUser(ctx context.Context, in *User, opts ...grpc.CallOption) (*MsgRsp, error) {
	out := new(MsgRsp)
	err := c.cc.Invoke(ctx, SignUpService_AddUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signUpServiceClient) RequestValid(ctx context.Context, in *EmailReq, opts ...grpc.CallOption) (*MsgRsp, error) {
	out := new(MsgRsp)
	err := c.cc.Invoke(ctx, SignUpService_RequestValid_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signUpServiceClient) CheckValidCode(ctx context.Context, in *CheckEmailReq, opts ...grpc.CallOption) (*MsgRsp, error) {
	out := new(MsgRsp)
	err := c.cc.Invoke(ctx, SignUpService_CheckValidCode_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *signUpServiceClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*TokenRsp, error) {
	out := new(TokenRsp)
	err := c.cc.Invoke(ctx, SignUpService_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SignUpServiceServer is the server API for SignUpService service.
// All implementations must embed UnimplementedSignUpServiceServer
// for forward compatibility
type SignUpServiceServer interface {
	// 添加用户
	AddUser(context.Context, *User) (*MsgRsp, error)
	// 申请验证码（提供用户邮箱），保存redis三分钟
	RequestValid(context.Context, *EmailReq) (*MsgRsp, error)
	// 验证邮箱验证码
	CheckValidCode(context.Context, *CheckEmailReq) (*MsgRsp, error)
	// 用户登陆验证
	Login(context.Context, *LoginReq) (*TokenRsp, error)
	mustEmbedUnimplementedSignUpServiceServer()
}

// UnimplementedSignUpServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSignUpServiceServer struct {
}

func (UnimplementedSignUpServiceServer) AddUser(context.Context, *User) (*MsgRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddUser not implemented")
}
func (UnimplementedSignUpServiceServer) RequestValid(context.Context, *EmailReq) (*MsgRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestValid not implemented")
}
func (UnimplementedSignUpServiceServer) CheckValidCode(context.Context, *CheckEmailReq) (*MsgRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckValidCode not implemented")
}
func (UnimplementedSignUpServiceServer) Login(context.Context, *LoginReq) (*TokenRsp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedSignUpServiceServer) mustEmbedUnimplementedSignUpServiceServer() {}

// UnsafeSignUpServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SignUpServiceServer will
// result in compilation errors.
type UnsafeSignUpServiceServer interface {
	mustEmbedUnimplementedSignUpServiceServer()
}

func RegisterSignUpServiceServer(s grpc.ServiceRegistrar, srv SignUpServiceServer) {
	s.RegisterService(&SignUpService_ServiceDesc, srv)
}

func _SignUpService_AddUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(User)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignUpServiceServer).AddUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SignUpService_AddUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignUpServiceServer).AddUser(ctx, req.(*User))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignUpService_RequestValid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignUpServiceServer).RequestValid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SignUpService_RequestValid_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignUpServiceServer).RequestValid(ctx, req.(*EmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignUpService_CheckValidCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckEmailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignUpServiceServer).CheckValidCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SignUpService_CheckValidCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignUpServiceServer).CheckValidCode(ctx, req.(*CheckEmailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _SignUpService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SignUpServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SignUpService_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SignUpServiceServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

// SignUpService_ServiceDesc is the grpc.ServiceDesc for SignUpService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SignUpService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "sign_up_idl.SignUpService",
	HandlerType: (*SignUpServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddUser",
			Handler:    _SignUpService_AddUser_Handler,
		},
		{
			MethodName: "RequestValid",
			Handler:    _SignUpService_RequestValid_Handler,
		},
		{
			MethodName: "CheckValidCode",
			Handler:    _SignUpService_CheckValidCode_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _SignUpService_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "sign_up_service.proto",
}
